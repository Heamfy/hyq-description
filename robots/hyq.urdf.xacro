<?xml version="1.0"?>

<robot name="hyq" xmlns:xacro="http://ros.org/wiki/xacro">

	<!-- This argument allows us to load joint sensors that measure the internal wrenches -->
	<xacro:arg name="load_force_sensors" default="false"/>

	<!-- The following included files set up definitions of parts of the robot body -->
	<xacro:include filename="$(find hyq_description)/urdfs/common.xacro"/>
	<xacro:include filename="$(find sensors_description)/urdfs/common.xacro"/>
	
	<!-- HyQ trunk -->
	<xacro:include filename="$(find hyq_description)/urdfs/trunk/trunk.urdf.xacro"/>

	<!-- HyQ legs -->
	<xacro:include filename="$(find hyq_description)/urdfs/leg/leg.urdf.xacro"/>

	<!-- HyQ sensors -->
	<xacro:include filename="$(find sensors_description)/urdfs/sensors/microstrain_3dmgx425_imu.urdf.xacro"/>
        <xacro:include filename="$(find sensors_description)/urdfs/sensors/kvh_1775_imu.urdf.xacro"/>
	<xacro:include filename="$(find sensors_description)/urdfs/sensors/asus_xtion.urdf.xacro"/>
        <!-- we may mount the hokuyo again in the future -->
	<!--xacro:include filename="$(find sensors_description)/urdfs/sensors/hokuyo_laser.urdf.xacro"/-->
	<xacro:include filename="$(find sensors_description)/urdfs/sensors/multisense_sl.urdf.xacro"/>

	<!-- generic simulator_gazebo plugins for starting mechanism control, ros time -->
	<xacro:include filename="$(find hyq_description)/gazebo/gazebo.urdf.xacro"/>

	<!-- Now we can start using the macros included above to define the actual HyQ -->

	<!-- The first use of a macro. This one was defined in trunk.urdf.xacro above.
A macro like this will expand to a set of link and joint definitions, and to additional
Gazebo-related extensions (sensor plugins, etc). The macro takes an argument, name,
that equals "base", and uses it to generate names for its component links and joints
(e.g., base_link). The included origin block is also an argument to the macro. By convention,
the origin block defines where the component is w.r.t its parent (in this case the parent
is the world frame). For more, see http://ros.org/wiki/xacro -->

	<!-- body -->
	<!-- trunk -->
	<xacro:hyq_trunk name="base">
		<!--origin xyz="-0.443 -0.191 -0.276" rpy="0 0 0"/-->
	</xacro:hyq_trunk>

	<!-- LF leg -->
	<xacro:hyq_leg
		name="lf"
		parent="trunk"
		reflect_hip="1"
		reflect_upper="1"
		reflect_front="1"
		knee_bent_backward="1"
		load_force_sensors="$(arg load_force_sensors)">
		<origin xyz="${d_fh/2} ${d_lr/2} 0" rpy="0 ${PI/2} ${PI}"/>
	</xacro:hyq_leg>

	<!-- RF leg -->
	<xacro:hyq_leg
		name="rf"
		parent="trunk"
		reflect_hip="-1"
		reflect_upper="-1"
		reflect_front="1"
		knee_bent_backward="1"
		load_force_sensors="$(arg load_force_sensors)">
		<origin xyz="${d_fh/2} ${-d_lr/2} 0" rpy="0 ${PI/2} 0"/>
	</xacro:hyq_leg>

	<!-- LH leg -->
	<xacro:hyq_leg
		name="lh"
		parent="trunk"
		reflect_hip="-1"
		reflect_upper="1"
		reflect_front="-1"
		knee_bent_backward="0"
		load_force_sensors="$(arg load_force_sensors)">
		<origin xyz="${-d_fh/2} ${d_lr/2} 0" rpy="0 ${PI/2} ${PI}"/>
	</xacro:hyq_leg>

	<!-- RH leg -->
	<xacro:hyq_leg
		name="rh"
		parent="trunk"
		reflect_hip="1"
		reflect_upper="-1"
		reflect_front="-1"
		knee_bent_backward="0"
		load_force_sensors="$(arg load_force_sensors)">
		<origin xyz="${-d_fh/2} ${-d_lr/2} 0" rpy="0 ${PI/2} 0"/>
	</xacro:hyq_leg>

	<!-- IMU trunk -->
        <xacro:microstrain_3dmgx425_imu
		parent="trunk"
		imu_name="trunk_imu"
		imu_topic="trunk_imu_1/data"
		update_rate="250">
		<!-- old URDF -->
		<!--origin xyz="0.290 0.000 0.0999214" rpy="0 ${-PI} 0"/ -->	
		<!-- new URDF with ideal values from CAD -->
                <!--origin xyz="0.28525 0.000 0.0967678" rpy="0 0 0"/-->

		<!-- new URDF, REAL values manually measured from the edge of the robot -->
                <origin xyz="0.27025 0.000 0.0967678" rpy="0 0 0"/>
        </xacro:microstrain_3dmgx425_imu>

        <!-- IMU trunk -->
        <!-- TODO We have to substitute the microstrain IMU with this one. Note that the imu_name has to be
                  trunk_imu because the DLS HW interfaces hardcoded that name -->
    	<xacro:kvh_1775_imu
                parent="trunk"
                imu_name="kvh_imu"
                imu_topic="kvh_imu/data"
                update_rate="250">
	    <!-- OLD URDF with manually created cylinder -->	
            <!--origin xyz="0.352845 0.0029 0.0503678" rpy="0 ${-PI} 0"/-->

            <!-- NEW URDF with mesh, ideal values from CAD -->
            <!--origin xyz="0.36347 0.00 0.0887678" rpy="0 ${PI} ${PI/4}"/-->

	    	<!-- NEW URDF with mesh, REAL values measured from the edge of the robot -->
		<!-- x = (500 - 153 - 61.77/2) / 1000	-->
		<!-- y = from CAD -->
		<origin xyz="0.316115 0.00 0.0887678" rpy="0 ${PI} ${PI/4}"/>
        </xacro:kvh_1775_imu>

	<!-- Hokuyo -->
	<!--xacro:hokuyo_laser
		name="laser"
		parent="trunk"
		ros_topic="scan" 
		update_rate="10" 
		min_angle="-5"
		max_angle="5"
		range="4.0">
            <origin xyz="0.475 0.0 -0.08823" rpy="${PI} 0.0 0"/>
	</xacro:hokuyo_laser-->

        <xacro:multisense_sl parent="trunk" prefix="multisense">
		<!-- taken from head calibration (with vicon) -->
		<!--origin xyz="0.761 -0.013 0.127" rpy="-0.002799508 0.514994302 -0.013000958" /-->
		<origin xyz="0.775883 0.000304069 0.147268" rpy="-0.0145379 0.52898 0.0107014"/> 
        </xacro:multisense_sl>

	<!-- Asus Xtion Pro -->
	<xacro:asus_xtion_camera name="asus" parent="trunk">
		<origin xyz="0.660678 -0.00571526 0.0705706" rpy="0.0364271 1.00115 0.0827391"/>
	</xacro:asus_xtion_camera>
</robot>

